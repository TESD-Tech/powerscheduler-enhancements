<!-- START courselist.te-tech.content.footer.txt -->
<style>
  .cell-editing {
    background-color: lightyellow !important;
  }

  .cell-error {
    background-color: #ffcccc !important;
  }

  .cell-success {
    background-color: #ccffcc !important;
  }

  @keyframes pulse {
    0% {
      background-color: lightblue;
    }
    50% {
      background-color: rgba(19, 237, 66, 0.855);
    }
    100% {
      background-color: lightblue;
    }
  }

  .cell-saving {
    animation: pulse 0.5s infinite;
  }

  .cell {
    position: relative;
  }

  .cell-handle {
    position: absolute;
    bottom: 0;
    right: 0;
    cursor: pointer;
    width: 0;
    height: 0;
    border-left: 10px solid transparent;
    border-top: 10px solid lime;
    transform: rotate(90deg);
  }

  /* Error message styling */
  .error-message {
    color: red;
    font-weight: bold;
    display: none; /* Hide the element by default */
  }

  /* The Modal (background) */
  .modal {
    display: none; /* Hidden by default */
    position: fixed; /* Stay in place */
    z-index: 1; /* Sit on top */
    left: 0;
    top: 0;
    padding-top: 20px;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.4); /* Black with opacity */
    backdrop-filter: blur(4px); /* Add a blur effect to the background */
    animation: fade-in 0.3s ease-in-out; /* Fade in animation */
  }

  /* Modal Content */
  .modal-content {
    background-color: #fefefe;
    margin: auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    max-width: 800px; /* Limit the maximum width */
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
    animation: slide-up 0.3s ease-in-out; /* Slide up animation */
    border-radius: 6px;
  }

  .modal-header {
    padding: 10px 16px;
    background-color: #dc3545; /* Red color */
    color: white;
    border-radius: 6px;
  }

  .modal-body {
    padding: 10px 16px; 
  }

  .modal-footer {
    padding: 10px 16px;
    background-color: #dc3545; /* Red color */
    color: white;
    border-radius: 6px;
  }
</style>

<div id="enhanced_course_list_instructions" class="hidden">
  <h3 class="toggle collapsed">T/E Tech - Enhanced Course List Guide~[if.isschedulebuild][else]<span style="font-size: smaller; font-style: italic;">(Note: The active scenario is set to "Load Only". Editing has not been enabled for certain fields.)[/if]</span></h3>
  <div>
    <p>Click on a cell to edit the value. Pressing Enter, Return, Tab, or moving out of the cell saves the value.</p>
    <p>Click and drag the green handle in the bottom right corner of a cell to copy the value to other cells.</p>
    <p>Press Ctrl+Z or Command+Z to undo the last change.</p>
    <p>Y/N columns only accept 'Y' or 'N' as values. If the value is not 'Y' or 'N', the cell will turn red and the value will not be saved.</p>
  </div>
</div>

<div id="errorModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <span class="close">&times;</span>
      <h2>Error</h2>
    </div>
    <div class="modal-body">
      <p id="errorMessage"></p>
      <pre id="options" class="report-options hidden"></pre>
    </div>
    <div class="modal-footer">
      ~[if#te.~(districtnumber)=124157802]
      <h3>Please enter a <a href="https://helpdesk.tesd.net/" target="_blank">HelpDesk Ticket</a> if the problem persists.</h3>
      [else#te]
      <h3>Please enter an <a href="https://github.com/TESD-Tech/powerscheduler-enhancements/issues" target="_blank">Issue</a> on our Github repo if the problem persists.</h3>
      [/if#te]
    </div>
  </div>
</div>

<script>
  const changeStack = [] // Array to hold changes for undo functionality
  const boolean_columns = ['Scheduled', 'Team', 'Section Type']
  const isScheduleBuild = ('true' === '~[if.isschedulebuild]true[else]false[/if]')
  const curSchoolID = '~(curschoolid)'
  let disabled_columns = []

  if (!isScheduleBuild) {
    disabled_columns = [
      'sched_scheduletypecode',
      'sched_balanceterms',
      'sched_validdaycombinations',
      'sched_validextradaycombinations',
      'sched_validstartperiods',
      'sched_facilities',
      'requests'
    ]
  }

  const columnTranslations = {
    'SCHED_SECTIONSOFFERED': 'SECTIONSTOOFFER',
  }

  if (curSchoolID === '0')
    handleError('Please select a school to view the course list.')

  let courses = []
  let header = []
  let isCopying = false // Flag to indicate if a cell is being copied
  let copiedValue = null // Value to be copied to other cells when dragging handle
  
  // Add event listener to document for keydown events
  document.addEventListener('keydown', (event) => {
    if ((event.ctrlKey || event.metaKey) && event.key === 'z') {
      undo()
    }
  })
  
  function observeCourseListUpdates(targetSelector, updateFunction) {
    const target = document.querySelector(targetSelector)

    if (!target) {
      handleError(`No element found with selector: ${targetSelector}`)
      console.error(`No element found with selector: ${targetSelector}`)
      return
    }

    const callback = (mutationsList, observer) => {
      for (let mutation of mutationsList) {
        if (mutation.type === 'childList') {
          for (let node of mutation.addedNodes) {
            if (node instanceof HTMLElement && node.matches('table.grid.ng-scope')) {
              try {
                  // When #advanced-report-grid-widgetRefreshButton is clicked, update the course list
                document.getElementById('advanced-report-grid-widgetRefreshButton').addEventListener('click', updateCourseList)
                document.getElementById('advanced-report-grid-widgetClearButton').addEventListener('click', updateCourseList)

                // When the user presses "Enter" or "Return" when in the input #simple-search-report-grid-widget, update the course list
                document.getElementById('simple-search-report-grid-widget').addEventListener('keydown', (event) => {
                  if (event.key === 'Enter' || event.key === 'Return') {
                    updateCourseList()
                  }
                })

                updateFunction()
              } catch (error) {
                handleError(`Failed to update course list: ${error}`)
                console.error('Failed to update course list:', error)
              }
              observer.disconnect()
              break
            }
          }
        }
      }
    }

    const observer = new MutationObserver(callback)
    observer.observe(target, { childList: true, subtree: true })
  }

  observeCourseListUpdates('div.box-round', updateCourseList)

  function updateCourseTable(courses) {
    const table = document.querySelector('table.grid.ng-scope')
    if (!table) {
      handleError('No course table found')
      console.error('No course table found')
      return
    }

    const tbody = table.querySelector('tbody')
    if (!tbody) {
      handleError('No course table body found')
      console.error('No course table body found')
      return
    }

    // Add a "Requests" column to the header
    const requestsHeader = document.createElement('th');
    requestsHeader.textContent = 'Requests';

    // Find the index of the th with text "Max"
    const headerRow = table.querySelector('thead tr');
    let maxIndex = 1;

    // Add Requests header to the header array in the same position as the "Max" header
    header.splice(maxIndex + 1, 0, { column: 'requests', type: 'number' })

    // Insert the new th after the "Max" th
    headerRow.insertBefore(requestsHeader, headerRow.cells[maxIndex + 1]);

    // Iterate each table row and update the course name to be a link
    for (let row of tbody.rows) {
      const course_number = row.cells[0].textContent
      const course_name = row.cells[1].textContent
      const course = courses.find(course => course.COURSE_NUMBER === course_number)

      // Add a "Requests" cell to each row in the tbody
      const cell = document.createElement('td');
      cell.classList.add('center')
      cell.textContent = course.REQUESTS || 0;

      // Insert the new td after the "Max" td
      row.insertBefore(cell, row.cells[maxIndex + 1]);

      if (course) {
        row.cells[0].innerHTML = `<a href="/admin/powerschedule/coursecatalog/courseedit.html?frn=107${course.DCID}" target="_blank">${course_number}</a>`
        row.cells[1].innerHTML = `<a href="/admin/powerschedule/coursecatalog/courseedit.html?frn=107${course.DCID}" target="_blank">${course_name}</a>`

        // Make other cells editable and add an input event listener
        for (let i = 2; i < row.cells.length; i++) {
          const this_header = header[i]

          // If the column is disabled, skip it
          if (disabled_columns.includes(this_header.column.toLowerCase() ) || this_header.column === 'requests') {
            continue
          }

          const cell = row.cells[i]
          cell.classList.add('cell')

          // Add unique id to cell
          cell.setAttribute('id', `${course.DCID}_${i}`)

          // Add dcid attribute to cell
          cell.setAttribute('dcid', course.DCID)

          // Add original value to cell as data attribute
          cell.setAttribute('data-original-value', cell.textContent)

          cell.contentEditable = 'true'
          cell.addEventListener('input', () => {
            handleCellChange(cell)
          })

          // Add drag handle to cell
          addDragHandle(cell)

          // Add keydown event listener to save cell on Enter key press
          cell.addEventListener('keydown', (event) => {
            if (event.key === 'Enter') {
              event.preventDefault() // Prevent adding a newline character
              saveCell(cell)
            }
            if (event.key === 'Tab') {
              event.preventDefault() // Prevent default tab action
              saveCell(cell)
              const nextCell = event.shiftKey ? cell.previousElementSibling : cell.nextElementSibling
              if (nextCell) {
                nextCell.focus()
                placeCaretAtEnd(nextCell)
              }
            }
          })

          // Save the cell if it loses focus
          cell.addEventListener('blur', () => {
            saveCell(cell)
          })
        }
      }
    }
  }

  function addDragHandle(cell) {
    const handle = document.createElement('div')
    handle.classList.add('cell-handle')
    handle.contentEditable = 'false'
    handle.style.display = 'none'
    cell.appendChild(handle)

    let dragStarted = false
    let draggedValue = null

    // When the cell is focused, show the handle
    cell.addEventListener('focus', () => {
      handle.style.display = 'block'
    })

    // When the cell is unfocused, hide the handle
    cell.addEventListener('blur', () => {
      handle.style.display = 'none'
    })

    // When the handle is pressed, start the drag operation
    handle.addEventListener('mousedown', (event) => {
      event.preventDefault()
      dragStarted = true
      draggedValue = cell.textContent
    })

    // When the mouse is moved, if a drag operation has started, copy the value to the cell under the cursor
    // Only if the cell is in the same column
    document.addEventListener('mousemove', (event) => {
      if (dragStarted) {
        const targetCell = document.elementFromPoint(event.clientX, event.clientY)
        if (targetCell && targetCell.classList.contains('cell')) {
          // Get the parent row of the target cell and the dragged cell
          const targetRow = targetCell.parentNode;
          const draggedRow = cell.parentNode;

          // Get the index of the target cell and the dragged cell in their respective rows
          const targetIndex = Array.from(targetRow.children).indexOf(targetCell);
          const draggedIndex = Array.from(draggedRow.children).indexOf(cell);

          // Only copy the value if the cells are in the same column
          if (targetIndex === draggedIndex) {
            targetCell.textContent = draggedValue
            handleCellChange(targetCell) // Call the function to handle cell changes
            // Then save the cell
            saveCell(targetCell)
          }
        }
      }
    })

    // When the mouse is released, end the drag operation
    document.addEventListener('mouseup', () => {
      if (dragStarted) {
        dragStarted = false
        draggedValue = null
      }
    })
  }

  function handleCellChange(cell) {
    // Add cell-editing class to cell
    cell.classList.add('cell-editing')

    // Remove cell-error and cell-success classes from cell
    cell.classList.remove('cell-error')
    cell.classList.remove('cell-success')

    const dcid = cell.getAttribute('dcid')
    const originalValue = cell.getAttribute('data-original-value')
    const newValue = cell.textContent
    const this_header = header[cell.cellIndex]

    // If original value is different from new value, set the changed attribute to true
    if (originalValue !== newValue) {
      cell.setAttribute('changed', 'true')
    } else {
      cell.removeAttribute('changed')
    }

    // If the cell is a boolean and the value is not 'Y', 'N' or '', set the cell to an error state
    if (this_header.type === 'boolean' && !['Y', 'N', ''].includes(newValue.toUpperCase() )) {
      cell.classList.remove('cell-editing')
      cell.classList.add('cell-error')
      return
    }
  }

  function saveCell(cell, isUndo = false) {
    if (cell.classList.contains('cell-error')) {
      return
    }

    // Remove cell-editing class from cell
    cell.classList.remove('cell-editing')

    // Re-add drag handle to cell if it was removed
    if (!cell.querySelector('.cell-handle')) {
      addDragHandle(cell)
    }

    // If cell has changed attribute, save the cell
    if (cell.getAttribute('changed') === 'true' || isUndo) {
      const dcid = cell.getAttribute('dcid')
      const column = header[cell.cellIndex].column
      const columnType = header[cell.cellIndex].type
      const originalValue = cell.getAttribute('data-original-value')
      let newValue = cell.textContent.trim()

      if (newValue === originalValue) {
        return
      }

      if (columnType === 'boolean') {
        newValue = newValue.toUpperCase()
        if (['','N'].includes(newValue)) {
          if (newValue === '') {
            cell.textContent = 'N'
          }
          newValue = 'False'
        } else {
          newValue = 'True'
        }
      } else if (columnType === 'number') {
        if (newValue === '') {
          newValue = 0
          cell.textContent = '0'
        }
      }

      // Add cell-saving class to cell
      cell.classList.add('cell-saving')

      save(cell, newValue, isUndo)

      // Move focus to the next cell down
      const currentRow = cell.parentNode
      const nextRow = currentRow.nextElementSibling
      if (nextRow) {
        const cellIndex = Array.from(currentRow.children).indexOf(cell)
        const nextCell = nextRow.children[cellIndex]
        if (nextCell) {
          nextCell.focus()
          placeCaretAtEnd(nextCell)
        }
      }
    }

  }

  function undo() {
    const change = changeStack.pop()
    if (!change) {
      return
    }
    const cell = document.getElementById(`${change.id}`)
    if (cell) {
      cell.textContent = change.originalValue
      cell.removeAttribute('changed')
      saveCell(cell, true)
    }
  }

  function save(cell, value, isUndo = false) {
    const id = cell.getAttribute('id')
    const dcid = cell.getAttribute('dcid')
    const url = `/admin/powerschedule/te-tech/form.html?frn=107${dcid}`
    let column = header[cell.cellIndex].column.toUpperCase()
    const table = 'SCHEDULECOURSECATALOGS'
    const newValue = value
    const originalValue = cell.getAttribute('data-original-value')

    // Translate column name if necessary
    if (columnTranslations[column]) {
      column = columnTranslations[column]
    }

    // Valid Start Periods are getting blanked out when saving, so we need to always send them
    const validStartPeriods_index = header.findIndex(header => header.column.toLowerCase() === 'sched_validstartperiods')
    const validStartPeriods = validStartPeriods_index > -1 ? cell.parentNode.cells[validStartPeriods_index].textContent : ''

    // Push cell to change stack if it's not an undo operation
    if (!isUndo) {
      changeStack.push({
        id: id,
        originalValue: originalValue,
        newValue: newValue
      })
    }

    // Set cell's original value to the new value
    cell.setAttribute('data-original-value', cell.textContent)

    // Prefetch the form to get input name
    return fetch(`${url}&table=${table}&column=${column}`, {
      credentials: 'include',
      method: 'GET'

    })
    .then(response => {
      if (response.redirected) {
        handleError('Session expired. Please refresh the page and try again.')
        console.error('Session expired. Please refresh the page and try again.')
        return
      } else if (!response.ok) {
        cell.classList.remove('cell-saving')
        cell.classList.add('cell-error')
        handleError('Network response was not ok')
        throw new Error('Network response was not ok')
      }
      return response.text()
    })
    .then(text => {
      const parser = new DOMParser()
      const htmlDocument = parser.parseFromString(text, 'text/html')
      const form = htmlDocument.querySelector('form')
      const input = form.querySelector('input[type="hidden"]')
      const inputName = input.getAttribute('name')

      return inputName
    })
    .then(inputName => {
      const saveParams = new URLSearchParams()
      saveParams.append('frn', `107${dcid}`)
      saveParams.append('btnSubmit', '')
      saveParams.append('ac', 'prim')
      saveParams.append('ac', 'schedulefunctions;getcatalogid')
      saveParams.append('ac', 'suv;lastcoursecatalogpage=/admin/PowerSchedule/ScheduleCourseEdit.html')
      saveParams.append(inputName, value)

      // Always send periods
      if (validStartPeriods) {
        const periods = validStartPeriods.split(',')
        for (let i = 0; i < periods.length; i++) {
          saveParams.append(`vsp`, periods[i])
        }
      }

      return fetch(`${url}&column=${column}`, {
        method: 'POST',
        credentials: 'include',
        body: saveParams.toString(),
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      })
    .then(response => {
      if (!response.ok) {
        cell.classList.remove('cell-saving')
        cell.classList.add('cell-error')
        throw new Error('Network response was not ok')
      }
        return response.text()
    })
    .then(response => {
      cell.classList.remove('cell-saving')
      cell.classList.add('cell-success')

      const parser = new DOMParser()
      const doc = parser.parseFromString(response, 'text/html')
      const boxRound = doc.querySelector('.box-round')
      let text = boxRound ? boxRound.textContent.trim() : '';
      error = text.replace(/Alert:/g, '').replace(/Back/g, '').trim()

      if (error) {
        cell.classList.remove('cell-success')
        cell.classList.add('cell-error')
        handleError(error)
        return
      }

      setTimeout(() => {
        // Remove cell-success class from cell
        cell.classList.remove('cell-success')
      }, 3000)

      return response
      
    })
    .catch(error => {
      handleError(error)
      console.error('Error:', error)
    })
  })
  .catch(error => {
    handleError(error)
    console.error('Error:', error)
  })
  }


  function placeCaretAtEnd(el) {
      el.focus()
      if (typeof window.getSelection != "undefined"
        && typeof document.createRange != "undefined") {
        var range = document.createRange()
        range.selectNodeContents(el)
        range.collapse(false)
        var sel = window.getSelection()
        sel.removeAllRanges()
        sel.addRange(range)
      } else if (typeof document.body.createTextRange != "undefined") {
        var textRange = document.body.createTextRange()
        textRange.moveToElementText(el)
        textRange.collapse(false)
        textRange.select()
      }
    }

  function updateHeader() {
    const table = document.querySelector('table.grid.ng-scope')
    if (!table) {
      handleError('No course table found')
      console.error('No course table found')
      return
    }

    const thead = table.querySelector('thead')
    if (!thead) {
      handleError('No course table header found')
      console.error('No course table header found')
      return
    }

    // Clear header
    header = []
    // Populate header using thead
    // Each th contains the database column name in the data-pss-sort-fields attribute
    for (let th of thead.querySelectorAll('th')) {
      const column_name = th.innerText
      const raw_header = th.getAttribute('data-pss-sort-fields')
      const header_parts = raw_header.split(',')
      const this_header = {}
      
      if (header_parts[0]) {
        [this_header.column, this_header.type] = header_parts[0].split('|')

        if (boolean_columns.includes(column_name)) {
          this_header.type = 'boolean'
        }
        header.push(this_header)
      }
    }
  }

  async function updateCourseList() {
    updateHeader()

    await fetch('/admin/powerschedule/te-tech/courses.json')
      .then(response => response.json())
      .then(data => {
        courses = data
        updateCourseTable(courses)
      })
      .catch(error => {
        console.error(error)
        handleError(`Failed to fetch course list: ${error}. Do you have an active <a href="/admin/powerschedule/home.html" target="_blank">Scenario</a> selected?`)
      })

    return
  }

  function handleError(error) {
    const modal = document.getElementById('errorModal');
    const span = document.getElementsByClassName('close')[0];
    const errorMessage = document.getElementById('errorMessage');
    const errorOptions = document.getElementById('options');

    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
      modal.style.display = 'none';
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
      if (event.target == modal) {
        modal.style.display = 'none';
      }
    }

    // Show the error message in the modal
    errorMessage.innerHTML = `Oops! ${error}. Please try again.`;
    modal.style.display = 'block';
    if (options && options != {})
      errorOptions.textContent = JSON.stringify(options, null, 2);
  }

  // On page load, prepend the instructions to div.box-round
  document.addEventListener('DOMContentLoaded', () => {
    // Prime PowerSchool and pre-fetch the courseedit form
    // This prevents Alert: Security Violation Logged errors

    const prime = fetch('/admin/powerschedule/coursecatalog/courseedit.html', {
      credentials: 'include',
      method: 'GET'
    })
    .then(response => {
      if (response.redirected) {
        handleError('Session expired. Please refresh the page and try again.')
        console.error('Session expired. Please refresh the page and try again.')
        return
      } else if (!response.ok) {
        handleError('Network response was not ok')
        throw new Error('Network response was not ok')
      }
      return response.text()
    })

    const boxRound = document.querySelector('div.box-round')
    if (boxRound) {
      const instructions = document.getElementById('enhanced_course_list_instructions')
      if (instructions) {
        boxRound.prepend(instructions)
        instructions.classList.remove('hidden')
      }
    }
  })
</script>
<!-- END courselist.te-tech.content.footer.txt -->